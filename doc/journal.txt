This file is just for me, to remember what happened because because I'm writing a thesis about it.

+-------------------------------------------- 12.02.2022 --------------------------------------------+

Heute habe ich mit der Simulation angefangen.
Es fehlen jedoch noch wichtige Funktionen in der Engine wie z.B. Tasten- oder Mausinputs in der Engine.
Desshalb kann ich noch nicht so einfach Testen.

Die Simulation simuliert jetzt erst die Diffusion der Flüssigkeit.
Jedoch muss ich noch mit den Inputwerten herumtesten, bis etwas brauchbares herauskommt.
Zudem kann es vorkommen, dass die Werte eskalieren.
Wenn es jedoch nicht eskaliert, sieht es schon ganz toll aus.

Das Bild diffusion1_12.02.2022 zeigt die Simulation am anfang. 
Je blauer ein Pixel, desto dichter ist es.
Auf dem Bild diffusion2_12.02.2022 sieht man, wie die Pixel am rand weniger Blau geworden sind.
Das liegt daran, dass ich momentan den Rand noch nicht setze.
Das wird aber später nicht mehr so sein. 

Programmier Zeit: 2h

+-------------------------------------------- 12.02.2022 --------------------------------------------+

Ich habe jetzt die Simulation versucht mit Userinput etwas mehr interaktiv zu machen.
Das war ein grosser Fehler... ich habe bestimmt 1h oder mehr nur mit der Simulation herumgespielt.
Zudem ist jetzt der stabile Diffusions-Altorithmus implementiert.
Jetzt kann die Simulation nicht mehr eskallieren.
Ich habe die Algebra auf Papier gemacht und war ertaunt, dass es wirklich funktioniert hatte.

Programmier Zeit: 2h

+-------------------------------------------- 12.03.2022 --------------------------------------------+

Letzte Woche habe ich mich dazu entschieden, nochmals neu mit der Simulation anzufangen.
Ich möchte jetzt die Simulation basierend auf der kinetischen Gastheorie.
Die Simulation basieret jetzt auf dem Schulstoff, den wir im Physik und in der Chemie angeschaut haben.
Jetzt werden nur noch Partikel simuliert.
Partikel sind bei mir momentan kleine Kreise mit dem Radius 1.
Das wird sich vermutlich noch ändern.

Die Kollisionen zwischen den Partikel werden mit Hilfe des Impulses und
der Erhaltung der kinetischen Energie berechnet.
Ich habe die Formeln selber hergeleitet.
Jedoch war es sehr aufwendig, da es nur sehr viele Variabeln und keine Konstanten gab.
Die Kollisionen scheinen zu funktionieren.
Wenn man aber eine grössere Anzahl an Teilchen simuliert, bilden sich kleine Haufen.
Ich möchte versuchen, eine Art, kontinuirliche Kollisionserkennung einzubauen, das wird aber vermutlich noch kompliziert.

Ich habe heute den Quad-Tree implementiert.
Das ist eine Art, ganz schnell, eine Liste zu durchsuchen.
Die Idee dahinter ist, dass ich nicht mehr alle Teilchen miteinander testen muss, beid er Kollision,
sondern dass nur noch 10 bis 20 Teilchen überprüfen muss.
So reduziert sich die Zeit zum Berechnen auf einen Bruchteil von vorhin.

Programmier Zeit: 10h

+-------------------------------------------- 25.04.2022 --------------------------------------------+

Ich habe das Problem, dass irgendetwas mit meiner Kollision-Detektion nicht richtig funktioniert. 
Ich vermute, dass die Partikel zum Zeitpunkt der Kollision schon ineinander sind, und somit im nächsten Frame nochmals kollidieren,
obwohl sie es nicht sollten.
Mir ist die Idee gekommen, dass ich das ganze mit 'continuous collisiondetection' lösen möchte.
Das Ziel dieser Methode ist, den Zeitpunkt einer Kollision genau bestimmen zu können und somit kann nie passieren, dass zwei Partikel ineinander geraten.
Ich habe versucht die Methoden herzuleiten, bin bis jetzt aber noch zu keinem Ziel gekommen.

Programmier Zeit: 3h

+-------------------------------------------- 28.04.2022 --------------------------------------------+

Ich habe es endlich geschaft, die Kollisionspunkte zu bestimmen von zwei Partikeln, wenn die Position und die Geschwindigkeit gegeben ist.
Somit kann ich jetzt immer genau bis zur nächsten Kollision simulieren.
So kann ich garantieren, dass nie eine Kollision verlohren geht, weil z.B. die Geschwindigkeit zu hoch ist die 'delta_time' zu hoch ist. 

Ich habe gemerkt, dass es zu doppel Kollisionen kommt, aufgrund von floating point precision errors.
Um das zu umgehen habe ich eine TOLERANCE definiert.
Jetzt kann es vorkommen, dass in ganz seltenen Fällen eine Kollision nicht erkannt wird.

Mir ist zudem noch aufgefallen, dass ich die neuen Velocities flasch berechne.

Programmier Zeit: 3h

+-------------------------------------------- 13.06.2022 --------------------------------------------+

Heute habe ich viel in GeoGebra gearbeitet.
Ich habe die Formeln für das bestimmen einer Kollision hergeleitet.
Leider funktioniert noch etwas nicht mit der Implementation.
Ich möchte den Code sowieso wiedereinmal etwas erneuern, damit das ganze etwas übersichtlicher wird.
Zudem muss ich irgendwann mal die Quad-Trees erneuern, weil sie die ganze zeit Probleme machen und noch nicht alles können, was sie können sollten.

Programmier Zeit: 3h

+-------------------------------------------- 14.06.2022 --------------------------------------------+

Ich hätte nie gedacht, dass dieser Tag kommen würde.
Die Kollisionserkennung mit den statischen Border-Objekten funktionert.
Ich habe nicht einmal stundenlang in GeoGebra meine Algebra überprüfen müssen.
Die evaluation Funktion siezt jetzt schon ein bisschen besser aus, aber es bleibt noch einiges übrig, zum überarbeiten.

Als nächstes steht aber der Härtetest an.
Ich möchte herausfinden, wie viele Objekte die Physik-Engine überleben kann.
Zuvor möchte ich aber noch machen, dass man die Border-Objekte von Hand zeichnen kann.
Zudem möchte ich ein paar vorgefertigte Szenen machen, die die Form eines flügels oder eines Rechtecks darstellen.
Ich bin gespannt ob turbulente Luft sichtbar sein wird oder ob die ganze Arbeit für nichts war.

Programmier Zeit: 6h